}
dim(in_fold_data)
dim(yhat_val)
dim(in_fold_data$children)
K_folds = 20
hotels_val = hotels_val%>%
mutate(fold_id = rep(1:K_folds, length=nrow(hotels_val)) %>% sample)
folds_lasso = foreach(fold = 1:K_folds, .combine='c') %do% {
in_fold_data = filter(hotels_val, fold_id == fold)
out_fold_data = filter(hotels_val, fold_id != fold)
x=model.matrix(children ~ (. -arrival_date - 1 ), data=out_fold_data)
y=out_fold_data$children
lasso = cv.gamlr(x, y,nfold=5, family="binomial")
xval=model.matrix(children ~ (. -arrival_date - 1), data=in_fold_data)
pred = predict(lasso, xval, type= "response")
yhat_val = ifelse(pred >= 0.5, 1, 0)
table = table(y=in_fold_data$children, yhat=yhat_val)
TPR = table[2,2] / (table[2,1] + table[2,2]) #TPR
}
folds_lasso
folds_lasso = data.frame(folds_lasso)%>%
colnames(folds_lasso)=c("TPR")%>%
folds_lasso$folds = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
folds_lasso
folds_lasso = data.frame(folds_lasso)
colnames(folds_lasso)=c("TPR")
folds_lasso$folds = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
folds_lasso
TPR_fold_comparison = ggplot(folds_lasso)+
geom_col(aes(x=fold, y=TPR))+labs(
x="Fold",
y="TPR",
title = "TPR by Fold")
TPR_fold_comparison
TPR_fold_comparison = ggplot(folds_lasso)+
geom_col(aes(x=folds, y=TPR))+labs(
x="Fold",
y="TPR",
title = "TPR by Fold")
TPR_fold_comparison
if (!("librarian" %in% rownames(utils::installed.packages()))) {
utils::install.packages("librarian")
}
librarian::shelf(
cran_repo = "https://cran.microsoft.com/", # Dallas, TX
ask = FALSE,
stats, # https://stackoverflow.com/questions/26935095/r-dplyr-filter-not-masking-base-filter#answer-26935536
here,
kableExtra,
rlang,
ggthemes,
tidyverse,
janitor,
magrittr,
glue,
lubridate,
haven,
snakecase,
sandwich,
lmtest,
gganimate,
gapminder,
stargazer,
snakecase,
mosaicData,
modelr,
rsample,
foreach,
caret,
parallel,
purrr,
pander,
readr,
xtable
)
here::i_am("R/include.R")
capmetro_UT <- read_csv(here("data/capmetro_UT.csv"))
data(SaratogaHouses)
german_credit <- read_csv(here("data/german_credit.csv"))
hotels_dev <- read_csv(here("data/hotels_dev.csv"))
hotels_val <- read_csv(here("data/hotels_val.csv"))
plot(m1_plot)
plot(m2_plot)
hotels_dev <- read_csv(here("data/hotels_dev.csv"))
hotels_dev = dummy_cols(hotels_dev) %>%
mutate(reserved_room_type_I=0)%>%
mutate(reserved_room_type_J=0)%>%
mutate(reserved_room_type_K=0)%>%
mutate(reserved_room_type_L=0)%>%
mutate(assigned_room_type_J=0)%>%
mutate(assigned_room_type_L=0)%>%
select(-c(assigned_room_type, reserved_room_type, hotel, meal, market_segment, distribution_channel, deposit_type, customer_type, required_car_parking_spaces))
hotels_val <- read_csv(here("data/hotels_val.csv"))
hotels_val = dummy_cols(hotels_val) %>%
mutate(reserved_room_type_I=0)%>%
mutate(reserved_room_type_J=0)%>%
mutate(reserved_room_type_K=0)%>%
mutate(reserved_room_type_L=0)%>%
mutate(assigned_room_type_J=0)%>%
mutate(assigned_room_type_L=0)%>%
select(-c(assigned_room_type, reserved_room_type, hotel, meal, market_segment, distribution_channel, deposit_type, customer_type, required_car_parking_spaces))
m1_x= model.matrix(children ~ market_segment + adults + customer_type + is_repeated_guest, data=hotels_dev)
hotels_dev <- read_csv(here("data/hotels_dev.csv"))
hotels_dev = dummy_cols(hotels_dev) %>%
mutate(reserved_room_type_I=0)%>%
mutate(reserved_room_type_J=0)%>%
mutate(reserved_room_type_K=0)%>%
mutate(reserved_room_type_L=0)%>%
mutate(assigned_room_type_J=0)%>%
mutate(assigned_room_type_L=0)%>%
select(-c(assigned_room_type, reserved_room_type, hotel, meal, market_segment, distribution_channel, deposit_type, customer_type, required_car_parking_spaces))
hotels_val <- read_csv(here("data/hotels_val.csv"))
hotels_val = dummy_cols(hotels_val) %>%
mutate(reserved_room_type_I=0)%>%
mutate(reserved_room_type_J=0)%>%
mutate(reserved_room_type_K=0)%>%
mutate(reserved_room_type_L=0)%>%
mutate(assigned_room_type_J=0)%>%
mutate(assigned_room_type_L=0)%>%
select(-c(assigned_room_type, reserved_room_type, hotel, meal, market_segment, distribution_channel, deposit_type, customer_type, required_car_parking_spaces))
#m1_x= model.matrix(children ~ market_segment + adults + customer_type + is_repeated_guest, data=hotels_dev)
m2_x= model.matrix(children ~ (. - arrival_date -1), data=hotels_dev)
#m3_x= model.matrix(children ~ (. -arrival_date - 1 + (hotel^2) + (market_segment)^2 + (customer_type)^2 + (adults*reserved_room_type) + (market_segment*customer_type)), data=hotels_dev)
y = hotels_dev$children
#m1_lasso = cv.gamlr(m1_x, y, nfold=10, family="binomial")
#m1_plot = plot(m1_lasso, bty="n")
#log(m1_lasso$lambda.min)
m2_lasso = cv.gamlr(m2_x, y, nfold=10, family="binomial")
plot(m2_lasso, bty="n")
log(m2_lasso$lambda.min)
#m3_lasso = cv.gamlr(m3_x, y, nfold=10, family="binomial") # Best linear model based out-of-sample deviance
#plot(m3_lasso, bty="n")
#log(m3_lasso$lambda.min)
#coef = coef(m3_lasso, select="min")
#########################
val_x= model.matrix(children ~ (. - arrival_date -1), data=hotels_val)
lasso_pred = predict(m2_lasso, val_x, select= "min")
pred = predict(m2_lasso, val_x, type= "response")
yhat_val = ifelse(pred >= 0.5, 1, 0)
conf = table(y=hotels_val$children, yhat=yhat_val)
conf[2,2] / (conf[2,1] + conf[2,2]) #TPR
conf[1,2] / (conf[1,1] + conf[1,2]) #FPR
TPR = 139/(263+139)
TPR
FPR = 57/(4540+57)
FPR
roc_curve = plot(roc(hotels_val$children, pred))
#########################
K_folds = 20
hotels_val = hotels_val%>%
mutate(fold_id = rep(1:K_folds, length=nrow(hotels_val)) %>% sample)
folds_lasso = foreach(fold = 1:K_folds, .combine='c') %do% {
in_fold_data = filter(hotels_val, fold_id == fold)
out_fold_data = filter(hotels_val, fold_id != fold)
x=model.matrix(children ~ (. -arrival_date - 1 ), data=out_fold_data)
y=out_fold_data$children
lasso = cv.gamlr(x, y,nfold=5, family="binomial")
xval=model.matrix(children ~ (. -arrival_date - 1), data=in_fold_data)
pred = predict(lasso, xval, type= "response")
yhat_val = ifelse(pred >= 0.5, 1, 0)
table = table(y=in_fold_data$children, yhat=yhat_val)
TPR = table[2,2] / (table[2,1] + table[2,2]) #TPR
}
folds_lasso = data.frame(folds_lasso)
colnames(folds_lasso)=c("TPR")
folds_lasso$folds = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
folds_lasso
TPR_fold_comparison = ggplot(folds_lasso)+
geom_col(aes(x=folds, y=TPR))+labs(
x="Fold",
y="TPR",
title = "TPR by Fold")
TPR_fold_comparison
plot(m2_plot)
plot(m2_lasso, bty="n")
plot(roc_curve)
plot(TPR_fold_comparison)
plot(TPR_fold_comparison)
plot(mean_boardings_line)
capmetro_UT = mutate(capmetro_UT,
day_of_week = factor(day_of_week,
levels=c("Mon", "Tue", "Wed","Thu", "Fri", "Sat", "Sun")),
month = factor(month,
levels=c("Sep", "Oct","Nov")))
mean_boardings = capmetro_UT %>%
group_by(hour_of_day, day_of_week, month)%>%
summarize(mean_boardings = mean(boarding))
mean_boardings_line = ggplot(mean_boardings) +
geom_line(aes(x=hour_of_day, y=mean_boardings, color=month))+
facet_wrap(~day_of_week)+
labs(x="Hour",
y="Average Boardings",
title= "Average Boardings by Time",
colour="Month")
capmetro_UT = mutate(capmetro_UT, minute = minute(timestamp))
boardings_per_hour = capmetro_UT %>%
group_by(minute, hour_of_day, weekend, temperature)%>%
summarize(boardings = sum(boarding))
boardings_per_hour_scatter = ggplot(boardings_per_hour) +
geom_point(aes(temperature, boardings, color=weekend))+
facet_wrap(~hour_of_day)+
labs(x="Temperature",
y="Boardings",
title = "Boardings by Time and Temperature",
colour="Weekend")
plot(mean_boardings_line)
# installs the librarian package if you don't have it
if (!("librarian" %in% rownames(utils::installed.packages()))) {
utils::install.packages("librarian")
}
# put all of the packages that you import here
librarian::shelf(
cran_repo = "https://cran.microsoft.com/", # Dallas, TX
ask = FALSE,
stats, # https://stackoverflow.com/questions/26935095/r-dplyr-filter-not-masking-base-filter#answer-26935536
here,
kableExtra,
rlang,
ggthemes,
tidyverse,
janitor,
magrittr,
glue,
lubridate,
haven,
snakecase,
sandwich,
lmtest,
gganimate,
gapminder,
stargazer,
snakecase,
mosaicData,
modelr,
rsample,
foreach,
caret,
parallel,
purrr,
pander,
readr,
xtable,
gamlr,
CVXR,
pROC,
ROCR,
fastDummies
)
# tell here where we are so we can use it elsewhere
here::i_am("R/include.R")
capmetro_UT <- read_csv(here("data/capmetro_UT.csv"))
data(SaratogaHouses)
german_credit <- read_csv(here("data/german_credit.csv"))
hotels_dev <- read_csv(here("data/hotels_dev.csv"))
hotels_val <- read_csv(here("data/hotels_val.csv"))
plot(mean_boardings_line)
plot(boardings_per_hour_scatter)
mean(lm_rmse_cv)
SaratogaHouses$waterfront <- ifelse(SaratogaHouses$waterfront == 'Yes', 1, 0)
SaratogaHouses$centralAir <- ifelse(SaratogaHouses$centralAir == 'Yes', 1, 0)
SaratogaHouses$newConstruction <- ifelse(SaratogaHouses$newConstruction == 'Yes', 1, 0)
SaratogaHouses$heating_electric <- ifelse(SaratogaHouses$heating == 'electric', 1, 0)
SaratogaHouses$heating_hotwater <- ifelse(SaratogaHouses$heating == 'hot water/steam', 1, 0)
SaratogaHouses$heating_hotair <- ifelse(SaratogaHouses$heating == 'hot air', 1, 0)
SaratogaHouses$fuel_electric <- ifelse(SaratogaHouses$fuel == 'electric', 1, 0)
SaratogaHouses$fuel_gas <- ifelse(SaratogaHouses$fuel == 'gas', 1, 0)
SaratogaHouses$fuel_oil <- ifelse(SaratogaHouses$fuel == 'oil', 1, 0)
SaratogaHouses$sewer_septic <- ifelse(SaratogaHouses$sewer == 'septic', 1, 0)
SaratogaHouses$sewer_public <- ifelse(SaratogaHouses$sewer == 'public/commercial', 1, 0)
SaratogaHouses$sewer_none <- ifelse(SaratogaHouses$sewer == 'none', 1, 0)
saratoga_split = initial_split(SaratogaHouses, prop = 0.8)
saratoga_train = training(saratoga_split)
saratoga_test = testing(saratoga_split)
K_folds = 10
SaratogaHouses = SaratogaHouses %>%
mutate(fold_id = rep(1:K_folds, length=nrow(SaratogaHouses)) %>% sample)
lm_rmse_cv = foreach(fold = 1:K_folds, .combine='c') %do% {
lm = lm(price ~ (. -pctCollege - heating - heating_hotair - fuel - fuel_oil - sewer - sewer_none +(bedrooms*lotSize)),
data=filter(SaratogaHouses, fold_id != fold))
modelr::rmse(lm, data=filter(SaratogaHouses, fold_id == fold))
}
lm_rmse_cv
mean(lm_rmse_cv)
SaratogaHouses_standardized = SaratogaHouses %>%
mutate(price_s = scale(price),
lotSize_s = scale(lotSize),
age_s = scale(age),
landValue_s = scale(landValue),
livingArea_s = scale(livingArea),
pctCollege_s = scale(pctCollege),
bedrooms_s = scale(bedrooms),
fireplaces_s = scale(fireplaces),
bathrooms_s = scale(bathrooms),
rooms_s = scale(rooms),
waterfront_s = scale(waterfront),
newConstruction_s = scale(newConstruction),
centralAir_s = scale(centralAir),
heating_electric_s = scale(heating_electric),
heating_hotwater_s = scale(heating_hotwater),
heating_hotair_s = scale(heating_hotair),
fuel_electric_s = scale(fuel_electric),
fuel_gas_s = scale(fuel_gas),
fuel_oil_s = scale(fuel_oil),
sewer_septic_s = scale(sewer_septic),
sewer_public_s = scale(sewer_public),
sewer_none_s = scale(sewer_none))
saratoga_split_s = initial_split(SaratogaHouses_standardized, prop = 0.8)
saratoga_train_s = training(saratoga_split_s)
saratoga_test_s = testing(saratoga_split_s)
SaratogaHouses_standardized = SaratogaHouses_standardized %>%
mutate(fold_id = rep(1:K_folds, length=nrow(SaratogaHouses_standardized)) %>% sample)
knn_rmse_cv = foreach(fold = 1:K_folds, .combine='c') %do% {
knn100 = knnreg(price ~(. -pctCollege - heating_hotair - fuel_oil - sewer_none),
data=filter(SaratogaHouses_standardized, fold_id != fold), k=20)
modelr::rmse(knn100, data=filter(SaratogaHouses_standardized, fold_id == fold))
}
knn_rmse_cv
mean(knn_rmse_cv)
SaratogaHouses_standardized_folds = crossv_kfold(SaratogaHouses_standardized, k=K_folds)
k_grid = c(2, 4, 6, 8, 10, 15, 20, 25, 30, 35, 40, 45,
50, 60, 70, 80, 90, 100, 125, 150, 175, 200, 250, 300)
knn_cv_grid = foreach(k = k_grid, .combine='rbind') %dopar% {
models = map(SaratogaHouses_standardized_folds$train, ~ knnreg(price ~(. -pctCollege - heating_hotair - fuel_oil - sewer_none), k=k, data = ., use.all=FALSE))
errs = map2_dbl(models, SaratogaHouses_standardized_folds$test, modelr::rmse)
c(k=k, err = mean(errs), std_err = sd(errs)/sqrt(K_folds))
} %>% as.data.frame
knn_cv_grid_plot = ggplot(knn_cv_grid) +
geom_point(aes(x=k, y=err)) +
geom_errorbar(aes(x=k, ymin = err-std_err, ymax = err+std_err)) +
scale_x_log10()
knn_cv_grid_plot
mean(lm_rmse_cv)
plot(knn_cv_grid_plot)
mean(knn_rmse_cv)
mean(lm_rmse_cv)
plot(knn_cv_grid_plot)
mean(knn_rmse_cv)
mean(knn_rmse_cv)
count_history = german_credit %>%
group_by(history)%>%
summarize(count=n())
count_history
count_history_plot = ggplot(count_history)+
geom_col(aes(history, count))+
labs(x="Credit History",
y="Total Loans",
title = "Total Loans by Credit History")
count_history_plot
count_default_history = german_credit %>%
filter(Default==1)%>%
group_by(history)%>%
summarize(count=n())
count_default_history
count_default_history_plot = ggplot(count_default_history)+
geom_col(aes(history, count))+
labs(x="Credit History",
y="Total Defaulted Loans",
title = "Total Defaulted Loans by Credit History")
count_default_history_plot
default_by_history = german_credit %>%
group_by(history)%>%
summarize(prop_default = ( sum( Default == 1 ) / length( Default ) ))
default_by_history
prop_default_bar = ggplot(default_by_history) +
geom_col(aes(x=history, y=prop_default))+
labs( x="Credit History",
y = "Probability of Default",
title = "Default Probabilty by Credit History")
prop_default_bar
logit_default = glm(Default ~ duration + amount + installment + age + history + purpose + foreign, data=german_credit, family=binomial)
coef(logit_default) %>% round(2)
plot(prop_default_bar)
logit_default %>%
tidy()%>%
mutate(
term = c("Intercept", "Duration", "Amount", "Installment", "Age", "Poor History", "Terrible History","Education","Goods/Repair","New Car","Used Car", "German"))%>%
kable(
caption = "**Logit Model Estimates For Predicting Default Probability**",
col.names = c("Predictor", "Coefficient", "SE", "Z", "p"),
digits = c(0, 2, 2, 2, 3),
align = c("l", "r", "r", "r", "r")
)
logit_default %>%
tidy()%>%
mutate(
term = c("Intercept", "Duration", "Amount", "Installment", "Age", "Poor History", "Terrible History","Education","Goods/Repair","New Car","Used Car", "German"))%>%
kable(
caption = "**Logit Model Estimates For Predicting Default Probability**",
col.names = c("Predictor", "Coefficient", "SE", "Z", "p"),
digits = c(0, 2, 2, 2, 3),
align = c("l", "r", "r", "r", "r")
)
plot(count_history_plot)
plot(m3_lasso, bty="n")
plot(m2_lasso, bty="n")
plot(m1_lasso, bty="n")
hotels_dev <- read_csv(here("data/hotels_dev.csv"))
hotels_val <- read_csv(here("data/hotels_val.csv"))
m1_x= model.matrix(children ~ market_segment + adults + customer_type + is_repeated_guest, data=hotels_dev)
m2_x= model.matrix(children ~ (. - arrival_date -1), data=hotels_dev)
m3_x= model.matrix(children ~ (. -arrival_date - 1 + (hotel^2) + (market_segment)^2 + (customer_type)^2 + (adults*reserved_room_type) + (market_segment*customer_type)), data=hotels_dev)
y = hotels_dev$children
m1_lasso = cv.gamlr(m1_x, y, nfold=10, family="binomial")
m1_plot = plot(m1_lasso, bty="n")
log(m1_lasso$lambda.min)
m2_lasso = cv.gamlr(m2_x, y, nfold=10, family="binomial")
plot(m2_lasso, bty="n")
log(m2_lasso$lambda.min)
m3_lasso = cv.gamlr(m3_x, y, nfold=10, family="binomial") # Best linear model based out-of-sample deviance
plot(m3_lasso, bty="n")
log(m3_lasso$lambda.min)
#########################
hotels_dev <- read_csv(here("data/hotels_dev.csv"))
hotels_dev = dummy_cols(hotels_dev) %>%
mutate(reserved_room_type_I=0)%>%
mutate(reserved_room_type_J=0)%>%
mutate(reserved_room_type_K=0)%>%
mutate(reserved_room_type_L=0)%>%
mutate(assigned_room_type_J=0)%>%
mutate(assigned_room_type_L=0)%>%
select(-c(assigned_room_type, reserved_room_type, hotel, meal, market_segment, distribution_channel, deposit_type, customer_type, required_car_parking_spaces))
hotels_val <- read_csv(here("data/hotels_val.csv"))
hotels_val = dummy_cols(hotels_val) %>%
mutate(reserved_room_type_I=0)%>%
mutate(reserved_room_type_J=0)%>%
mutate(reserved_room_type_K=0)%>%
mutate(reserved_room_type_L=0)%>%
mutate(assigned_room_type_J=0)%>%
mutate(assigned_room_type_L=0)%>%
select(-c(assigned_room_type, reserved_room_type, hotel, meal, market_segment, distribution_channel, deposit_type, customer_type, required_car_parking_spaces))
val_x= model.matrix(children ~ (. - arrival_date -1), data=hotels_val)
lasso_pred = predict(m2_lasso, val_x, select= "min")
plot(roc_curve)
plot(TPR_fold_comparison)
hotels_dev <- read_csv(here("data/hotels_dev.csv"))
hotels_dev = dummy_cols(hotels_dev) %>%
mutate(reserved_room_type_I=0)%>%
mutate(reserved_room_type_J=0)%>%
mutate(reserved_room_type_K=0)%>%
mutate(reserved_room_type_L=0)%>%
mutate(assigned_room_type_J=0)%>%
mutate(assigned_room_type_L=0)%>%
select(-c(assigned_room_type, reserved_room_type, hotel, meal, market_segment, distribution_channel, deposit_type, customer_type, required_car_parking_spaces))
hotels_val <- read_csv(here("data/hotels_val.csv"))
hotels_val = dummy_cols(hotels_val) %>%
mutate(reserved_room_type_I=0)%>%
mutate(reserved_room_type_J=0)%>%
mutate(reserved_room_type_K=0)%>%
mutate(reserved_room_type_L=0)%>%
mutate(assigned_room_type_J=0)%>%
mutate(assigned_room_type_L=0)%>%
select(-c(assigned_room_type, reserved_room_type, hotel, meal, market_segment, distribution_channel, deposit_type, customer_type, required_car_parking_spaces))
#m1_x= model.matrix(children ~ market_segment + adults + customer_type + is_repeated_guest, data=hotels_dev)
m2_x= model.matrix(children ~ (. - arrival_date -1), data=hotels_dev)
#m3_x= model.matrix(children ~ (. -arrival_date - 1 + (hotel^2) + (market_segment)^2 + (customer_type)^2 + (adults*reserved_room_type) + (market_segment*customer_type)), data=hotels_dev)
y = hotels_dev$children
#m1_lasso = cv.gamlr(m1_x, y, nfold=10, family="binomial")
#m1_plot = plot(m1_lasso, bty="n")
#log(m1_lasso$lambda.min)
m2_lasso = cv.gamlr(m2_x, y, nfold=10, family="binomial")
plot(m2_lasso, bty="n")
log(m2_lasso$lambda.min)
#m3_lasso = cv.gamlr(m3_x, y, nfold=10, family="binomial") # Best linear model based out-of-sample deviance
#plot(m3_lasso, bty="n")
#log(m3_lasso$lambda.min)
#########################
val_x= model.matrix(children ~ (. - arrival_date -1), data=hotels_val)
lasso_pred = predict(m2_lasso, val_x, select= "min")
pred = predict(m2_lasso, val_x, type= "response")
yhat_val = ifelse(pred >= 0.5, 1, 0)
conf = table(y=hotels_val$children, yhat=yhat_val)
conf[2,2] / (conf[2,1] + conf[2,2]) #TPR
conf[1,2] / (conf[1,1] + conf[1,2]) #FPR
TPR = 139/(263+139)
TPR
FPR = 57/(4540+57)
FPR
roc_curve = plot(roc(hotels_val$children, pred))
#########################
K_folds = 20
hotels_val = hotels_val%>%
mutate(fold_id = rep(1:K_folds, length=nrow(hotels_val)) %>% sample)
folds_lasso = foreach(fold = 1:K_folds, .combine='c') %do% {
in_fold_data = filter(hotels_val, fold_id == fold)
out_fold_data = filter(hotels_val, fold_id != fold)
x=model.matrix(children ~ (. -arrival_date - 1 ), data=out_fold_data)
y=out_fold_data$children
lasso = cv.gamlr(x, y,nfold=5, family="binomial")
xval=model.matrix(children ~ (. -arrival_date - 1), data=in_fold_data)
pred = predict(lasso, xval, type= "response")
yhat_val = ifelse(pred >= 0.5, 1, 0)
table = table(y=in_fold_data$children, yhat=yhat_val)
TPR = table[2,2] / (table[2,1] + table[2,2]) #TPR
}
folds_lasso = data.frame(folds_lasso)
colnames(folds_lasso)=c("TPR")
folds_lasso$folds = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
folds_lasso
TPR_fold_comparison = ggplot(folds_lasso)+
geom_col(aes(x=folds, y=TPR))+labs(
x="Fold",
y="TPR",
title = "TPR by Fold")
TPR_fold_comparison
mean_TPR = folds_lasso %>%
summarize(meanTPR = mean(TPR))
plot(m1_lasso, bty="n")
plot(m2_lasso, bty="n")
plot(m3_lasso, bty="n")
plot(roc_curve)
mean_TPR
plot(TPR_fold_comparison)
