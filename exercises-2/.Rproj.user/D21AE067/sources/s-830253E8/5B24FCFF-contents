library(mosaic)
library(tidyverse)
library(rmarkdown)
library(ggplot2) 

#load data
ABIA <- read.csv("~/Desktop/UT/Statistical Learning/ABIA.csv")
View(ABIA)

sclass <- read.csv("~/Desktop/UT/Statistical Learning/sclass.csv")
View(sclass)

billboard <- read.csv("~/Desktop/UT/Statistical Learning/billboard.csv")
View(billboard)

olympics_top20 <- read.csv("~/Desktop/UT/Statistical Learning/olympics_top20.csv")
View(olympics_top20) 

# 1 - data visualizations: flights at ABIA
head(ABIA)

#rename airline codes
ABIA$UniqueCarrier <- gsub("EV", "ExpressJet", ABIA$UniqueCarrier)
ABIA$UniqueCarrier <- gsub("YV", "Mesa", ABIA$UniqueCarrier)
ABIA$UniqueCarrier <- gsub("B6", "Jetblue", ABIA$UniqueCarrier)
ABIA$UniqueCarrier <- gsub("OH", "Jetstream Intl", ABIA$UniqueCarrier)
ABIA$UniqueCarrier <- gsub("DL", "Delta", ABIA$UniqueCarrier)
ABIA$UniqueCarrier <- gsub("UA", "United", ABIA$UniqueCarrier)
ABIA$UniqueCarrier <- gsub("AA", "American", ABIA$UniqueCarrier)
ABIA$UniqueCarrier <- gsub("WN", "Southwest", ABIA$UniqueCarrier)
ABIA$UniqueCarrier <- gsub("CO", "NW Cargo Intl", ABIA$UniqueCarrier)
ABIA$UniqueCarrier <- gsub("OO", "Skywest", ABIA$UniqueCarrier)
ABIA$UniqueCarrier <- gsub("MQ", "Envoy Air", ABIA$UniqueCarrier)
ABIA$UniqueCarrier <- gsub("XE", "JSX Air", ABIA$UniqueCarrier)
ABIA$UniqueCarrier <- gsub("9E", "Endeavor Air", ABIA$UniqueCarrier)
ABIA$UniqueCarrier <- gsub("F9", "Frontier", ABIA$UniqueCarrier)
ABIA$UniqueCarrier <- gsub("US", "Puerto Rico Intl", ABIA$UniqueCarrier)
ABIA$UniqueCarrier <- gsub("NW", "Northwest", ABIA$UniqueCarrier)

#What is the best day of week to fly to minimize delays, and does this change by carrier?
by_carrier_daily = ABIA %>%
  group_by(UniqueCarrier, DayOfWeek)%>%
  summarize(mean_delay=mean(DepDelay, na.rm=TRUE))
by_carrier_daily

delay_day_carrier = ggplot(by_carrier_daily) + 
  geom_col(aes(x=factor(DayOfWeek), y=mean_delay, color=DayOfWeek)) + 
  labs(x="Day of Week",
       y="Average Delay (minutes)",
       title= "Average Delays by Day of Week") +
  facet_wrap(facets= ~fct_reorder(UniqueCarrier, mean_delay, .desc = TRUE))
delay_day_carrier

#Does this change for time of year?
by_carrier_monthly = ABIA %>%
  group_by(UniqueCarrier, Month)%>%
  summarize(mean_delay=mean(DepDelay, na.rm=TRUE))
by_carrier_monthly

delay_month_carrier = ggplot(by_carrier_monthly) + 
  geom_col(aes(x=factor(Month), y=mean_delay, color=Month)) + 
  labs(x="Month",
       y="Average Delay (minutes)",
       title= "Average Delays by Month of Year")+
  facet_wrap(facets= ~fct_reorder(UniqueCarrier, mean_delay, .desc = TRUE))
delay_month_carrier

#which carrier has the most flights?
ABIA %>%
  group_by(UniqueCarrier) %>%
  summarize(total_flights = (count=n())) %>%
  arrange(desc(total_flights))

# 2 - wrangling the billboard top 100 

# part a 
top10 = billboard%>%
  group_by(performer, song)%>%
  summarize(count=n())%>%
  arrange(desc(count))%>%
  head(10)
top10

# part b 
chart_per_year = billboard%>%
  filter(year>=1959 & year<=2020)%>%
  group_by(year,song_id)%>%
  summarize(count=n())
chart_per_year

musical_diversity_per_year = chart_per_year %>%
  group_by(year)%>%
  summarize(count=n())
musical_diversity_per_year

musical_diversity_plot = ggplot(musical_diversity_per_year) +
  geom_line(aes(x=year, y=count)) +
  labs(x="Year",
       y="Number of Unique Songs",
       title="Musical Diversity of Billboard Top 100 by Year")
musical_diversity_plot

# part c 
ten_week_hit = billboard %>%
  filter(weeks_on_chart>=10)%>%
  group_by(performer, song_id)%>%
  summarize(count=n())
ten_week_hit

ten_week_hit_artist = ten_week_hit%>%
  group_by(performer)%>%
  summarize(count=n())%>% 
  filter(count>=30) %>%
  arrange(desc(count))
ten_week_hit_artist

ten_week_hit_plot = ggplot(ten_week_hit_artist, aes(x=performer, y=count)) +
  geom_col(aes(x=performer, y=count)) +
  labs(x="Artist",
       y= "Number of Hits",
       title="Number of Ten-Week Hits per Artist") + geom_text(aes(label=count), hjust = -0.5) +
  coord_flip() 
ten_week_hit_plot

# 3 - wrangling the Olympics
#Part a
female_heights_95 = olympics_top20%>%
  filter(sex=="F" & sport=="Athletics")%>%
  group_by(event)%>%
  summarize(q95 = quantile(height, 0.95))
female_heights_95

#part b
greatest_variation_height = olympics_top20%>%
  filter(sex=="F")%>%
  group_by(event)%>%
  summarize(sd= sd(height))%>%
  arrange(desc(sd))%>%
  head(10)
greatest_variation_height

#part c
swimming_age = olympics_top20%>%
  filter(sport=="Swimming")%>%
  group_by(year)%>%
  summarize(mean_age = mean(age))
swimming_age

swimming_age_plot = ggplot(swimming_age)+
  geom_line(aes(x=year, y=mean_age)) + 
  labs(x="Year",
       y="Average Age",
       title="Average Age of Olympic Swimmers")
swimming_age_plot

swimming_age_M_F = olympics_top20%>%
  filter(sport=="Swimming")%>%
  group_by(year, sex)%>%
  summarize(mean_age_M_F = mean(age))%>%
  arrange((mean_age_M_F))
swimming_age_M_F

swimming_age_M_F_df <- data.frame(swimming_age_M_F, stringsAsFactors = FALSE)
swimming_age_M_F_df

swimming_age_M_F_plot = ggplot(swimming_age_M_F_df) +
  geom_line(aes(x=year, y=mean_age_M_F, color=sex)) +
  labs(x="Year",
       y="Average Age",
       title="Average Age of Male and Female Olympic Swimmers")
swimming_age_M_F_plot


# 4 - k-nearest neighbors 
sclass_350 = sclass%>%
  filter(trim=="350")
sclass_350_split =  initial_split(sclass_350, prop=0.8)
sclass_350_train = training(sclass_350_split)
sclass_350_test  = testing(sclass_350_split)


#k_grid = c(2, 10, 15, 20, 40, 60, 80, 100)

knn2_sclass350 = knnreg(price ~ mileage, data=sclass_350_train, k=2)
knn2_sclass350_rmse = rmse(knn2_sclass350, sclass_350_test)

knn10_sclass350 = knnreg(price ~ mileage, data=sclass_350_train, k=10)
knn10_sclass350_rmse = rmse(knn10_sclass350, sclass_350_test)

knn15_sclass350 = knnreg(price ~ mileage, data=sclass_350_train, k=15)
knn15_sclass350_rmse = rmse(knn15_sclass350, sclass_350_test)

knn20_sclass350 = knnreg(price ~ mileage, data=sclass_350_train, k=20)
knn20_sclass350_rmse = rmse(knn20_sclass350, sclass_350_test)

knn40_sclass350 = knnreg(price ~ mileage, data=sclass_350_train, k=40)
knn40_sclass350_rmse = rmse(knn40_sclass350, sclass_350_test)

knn60_sclass350 = knnreg(price ~ mileage, data=sclass_350_train, k=60)
knn60_sclass350_rmse = rmse(knn60_sclass350, sclass_350_test)

knn80_sclass350 = knnreg(price ~ mileage, data=sclass_350_train, k=80)
knn80_sclass350_rmse = rmse(knn80_sclass350, sclass_350_test)

knn100_sclass350 = knnreg(price ~ mileage, data=sclass_350_train, k=100)
knn100_sclass350_rmse = rmse(knn100_sclass350, sclass_350_test)

RMSE_K_sclass350 <- data.frame(K = c(2,10,15,20,40,60,80,100),
                         RMSE = c(knn2_sclass350_rmse, knn10_sclass350_rmse, knn15_sclass350_rmse, knn20_sclass350_rmse, knn40_sclass350_rmse, knn60_sclass350_rmse, knn80_sclass350_rmse, knn100_sclass350_rmse))


#plot RMSE versus K
RMSE_K_sclass350_plot = ggplot(RMSE_K_sclass350) +
  geom_point(aes(x=factor(K),y=RMSE)) +
  labs(title = "S Class 350: Out-of-sample RMSE for Values of K",
       x = "K",
       y = "Out-of-sample RMSE")
RMSE_K_sclass350_plot

#Fit the model to training set and make predictions on test set
sclass_350_test =  sclass_350_test %>%
  mutate(price_pred_knn2 = predict(knn2_sclass350, sclass_350_test))

sclass_350_test =  sclass_350_test %>%
  mutate(price_pred_knn10 = predict(knn10_sclass350, sclass_350_test))

sclass_350_test =  sclass_350_test %>%
  mutate(price_pred_knn15 = predict(knn15_sclass350, sclass_350_test))

sclass_350_test =  sclass_350_test %>%
  mutate(price_pred_knn20 = predict(knn20_sclass350, sclass_350_test))

sclass_350_test =  sclass_350_test %>%
  mutate(price_pred_knn40 = predict(knn40_sclass350, sclass_350_test))

sclass_350_test =  sclass_350_test %>%
  mutate(price_pred_knn60 = predict(knn60_sclass350, sclass_350_test))

sclass_350_test =  sclass_350_test %>%
  mutate(price_pred_knn80 = predict(knn80_sclass350, sclass_350_test))

sclass_350_test =  sclass_350_test %>%
  mutate(price_pred_knn100 = predict(knn100_sclass350, sclass_350_test))

sclass_350_predictions = ggplot(data = sclass_350_test) + 
  geom_point(mapping = aes(x = mileage, y = price), alpha=0.2) + 
  ylim(6000, 110000) +
  geom_line(aes(x = mileage, y = price_pred_knn40), color='red', size=1.5) +
  labs(x="Mileage",
       y="Price",
       title="S Class 350: Price & Mileage for K=40")
sclass_350_predictions 


############################
sclass_65 = sclass %>%
  filter(trim=="65 AMG")
sclass_65_split =  initial_split(sclass_65, prop=0.8)
sclass_65_train = training(sclass_65_split)
sclass_65_test  = testing(sclass_65_split)

#k_grid = c(2, 10, 15, 20, 40, 60, 80, 100)

knn2_sclass65 = knnreg(price ~ mileage, data=sclass_65_train, k=2)
knn2_sclass65_rmse = rmse(knn2_sclass65, sclass_65_test)

knn10_sclass65 = knnreg(price ~ mileage, data=sclass_65_train, k=10)
knn10_sclass65_rmse = rmse(knn10_sclass65, sclass_65_test)

knn15_sclass65 = knnreg(price ~ mileage, data=sclass_65_train, k=15)
knn15_sclass65_rmse = rmse(knn15_sclass65, sclass_65_test)

knn20_sclass65 = knnreg(price ~ mileage, data=sclass_65_train, k=20)
knn20_sclass65_rmse = rmse(knn20_sclass65, sclass_65_test)

knn40_sclass65 = knnreg(price ~ mileage, data=sclass_65_train, k=40)
knn40_sclass65_rmse = rmse(knn40_sclass65, sclass_65_test)

knn60_sclass65 = knnreg(price ~ mileage, data=sclass_65_train, k=60)
knn60_sclass65_rmse = rmse(knn60_sclass65, sclass_65_test)

knn80_sclass65 = knnreg(price ~ mileage, data=sclass_65_train, k=80)
knn80_sclass65_rmse = rmse(knn80_sclass65, sclass_65_test)

knn100_sclass65 = knnreg(price ~ mileage, data=sclass_65_train, k=100)
knn100_sclass65_rmse = rmse(knn100_sclass65, sclass_65_test)

RMSE_K_sclass65 <- data.frame(K = c(2,10,15,20,40,60,80,100),
                               RMSE = c(knn2_sclass65_rmse, knn10_sclass65_rmse, knn15_sclass65_rmse, knn20_sclass65_rmse, knn40_sclass65_rmse, knn60_sclass65_rmse, knn80_sclass65_rmse, knn100_sclass65_rmse))


#plot RMSE versus K
RMSE_K_sclass65_plot = ggplot(RMSE_K_sclass65) +
  geom_point(aes(x=factor(K),y=RMSE)) +
  labs(title = "S Class 65 AMG: Out-of-sample RMSE for Values of K",
       x = "K",
       y = "Out-of-sample RMSE")
RMSE_K_sclass65_plot

#Fit the model to training set and make predictions on test set
sclass_65_test =  sclass_65_test %>%
  mutate(price_pred_knn2 = predict(knn2_sclass65, sclass_65_test))

sclass_65_test =  sclass_65_test %>%
  mutate(price_pred_knn10 = predict(knn10_sclass65, sclass_65_test))

sclass_65_test =  sclass_65_test %>%
  mutate(price_pred_knn15 = predict(knn15_sclass65, sclass_65_test))

sclass_65_test =  sclass_65_test %>%
  mutate(price_pred_knn20 = predict(knn20_sclass65, sclass_65_test))

sclass_65_test =  sclass_65_test %>%
  mutate(price_pred_knn40 = predict(knn40_sclass65, sclass_65_test))

sclass_65_test =  sclass_65_test %>%
  mutate(price_pred_knn60 = predict(knn60_sclass65, sclass_65_test))

sclass_65_test =  sclass_65_test %>%
  mutate(price_pred_knn80 = predict(knn80_sclass65, sclass_65_test))

sclass_65_test =  sclass_65_test %>%
  mutate(price_pred_knn100 = predict(knn100_sclass65, sclass_65_test))

sclass_65_predictions = ggplot(data = sclass_65_test) + 
  geom_point(mapping = aes(x = mileage, y = price), alpha=0.2) + 
  ylim(6000, 110000) +
  geom_line(aes(x = mileage, y = price_pred_knn60), color='red', size=1.5) +
  labs(x="Mileage",
       y="Price",
       title="S Class 65 AMG: Price & Mileage for K=60")
sclass_65_predictions 



